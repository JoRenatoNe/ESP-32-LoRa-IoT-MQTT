//SENDER

//Inclusão das bibliotecas
#include <SPI.h>
#include <LoRa.h>
#include "SSD1306.h"
#include<Arduino.h>
 
//Pinos GPIOs ESP32 display OLED por meio desta conexão
//OLED_SDA -- GPIO4
//OLED_SCL -- GPIO15
//OLED_RST -- GPIO16
 
SSD1306  display(0x3c, 4, 15);
 
// WIFI_LoRa_32 ports
// GPIO5  -- SX1278's SCK
// GPIO19 -- SX1278's MISO
// GPIO27 -- SX1278's MOSI
// GPIO18 -- SX1278's CS
// GPIO14 -- SX1278's RESET
// GPIO26 -- SX1278's IRQ(Interrupt Request)
 
#define SS      18
#define RST     14
#define DI0     26

//Definição da frequência
#define BAND    915E6 

//Contador de pacotes enviados via radio LoRa
int counter = 0;
 
void setup() {
pinMode(25,OUTPUT); 
pinMode(16,OUTPUT);
digitalWrite(16, LOW);    
delay(50); 
digitalWrite(16, HIGH);

// Serial iniciada com a velocidade de 115200
Serial.begin(115200);
while (!Serial); 

//Configurações de inicialização do display OLED
display.init();
display.flipScreenVertically();
display.setFont(ArialMT_Plain_10);
display.setTextAlignment(TEXT_ALIGN_LEFT);
display.drawString(5,5,"LoRa Sender");
display.display();

//Configurações para inicializar o LoRa
SPI.begin(5,19,27,18);
LoRa.setPins(SS,RST,DI0);
Serial.println("LoRa Sender");

//Se não iniciar, exibe mensagem de erro
if (!LoRa.begin(BAND)) {
Serial.println("Starting LoRa failed!");
while (1);
}

//Se sim, exibe mensagem de inicio e apresenta no display
Serial.println("LoRa Initial OK!");
display.drawString(5,20,"LoRa Initializing OK!");
display.display();
delay(2000);
}

//Processo de envio
void loop() {
Serial.print("Sending packet: ");
Serial.println(counter);
display.clear();
display.setFont(ArialMT_Plain_16);
display.drawString(3, 5, "Sending packet ");
display.drawString(50, 30, String(counter));
display.display();

//contagem e leitura de pacotes
LoRa.beginPacket();
LoRa.print("Hello..");
LoRa.print(counter);
LoRa.endPacket();
counter++;
digitalWrite(25, HIGH);   
delay(1000);                       
digitalWrite(25, LOW);    
delay(1000);                      
delay(3000);
}

//RECEIVER

#include <SPI.h>
#include <LoRa.h>
#include "SSD1306.h"
 
SSD1306  display(0x3c, 4, 15);

//PINOUT

//OLED_SDA -- GPIO4
//OLED_SCL -- GPIO15
//OLED_RST -- GPIO16
// WIFI_LoRa_32 ports
// GPIO5  -- SX1278's SCK
// GPIO19 -- SX1278's MISO
// GPIO27 -- SX1278's MOSI
// GPIO18 -- SX1278's CS
// GPIO14 -- SX1278's RESET
// GPIO26 -- SX1278's IRQ(Interrupt Request)
 
#define SS      18
#define RST     14
#define DI0     26
#define BAND    915E6
 
void setup() {
pinMode(16,OUTPUT);
digitalWrite(16, LOW);   
delay(50); 
digitalWrite(16, HIGH);
display.init();
display.flipScreenVertically();
display.setFont(ArialMT_Plain_10);
display.setTextAlignment(TEXT_ALIGN_LEFT);
   
Serial.begin(115200);
while (!Serial); 
delay(1000);
Serial.println("LoRa Receiver"); 
display.drawString(5,5,"LoRa Receiver"); 
display.display();
SPI.begin(5,19,27,18);
LoRa.setPins(SS,RST,DI0);
   
if (!LoRa.begin(BAND)) {
display.drawString(5,25,"Starting LoRa failed!");
while (1);
  }
  
Serial.println("LoRa Initial OK!");
display.drawString(5,25,"LoRa Initializing OK!");
display.display();

}

void loop() {

//Processo de recepção de pacotes
int packetSize = LoRa.parsePacket();
if (packetSize) {

//após receber, exibe no display
Serial.print("Received packet. ");
display.clear();
display.setFont(ArialMT_Plain_16);
display.drawString(3, 0, "Received packet ");
display.display();
    
while (LoRa.available()) {
String data = LoRa.readString();
Serial.print(data);
display.drawString(20,22, data);
display.display();
}

//Exibição dos parâmetros RSSI e SNR. Para uma melhor visualização é conveniente comentar um dos parâmetros e exibir um por vez
Serial.print(" with Snr ");
//Serial.println(LoRa.packetRssi());
Serial.println("Snr: " + String(LoRa.packetSnr()));
//display.drawString(20, 45, "RSSI:  ");
display.drawString(20, 45, "SNR:  ");
display.drawString(70, 45, (String)LoRa.packetSnr());
display.display();
}
}
