//PRINCIPAL (MASTER-SLAVE)

//Inserção das bibliotecas necessárias

#include <SPI.h> 
#include <LoRa.h> 
#include <Wire.h> 
#include <SSD1306.h> 

//A linha "#define MASTER" descomentada compilar o Master e comentada incicia o Slave
#define MASTER

//Pinagem reservada ao ESP com rádio LoRa
#define SCK 5   // GPIO5  SCK
#define MISO 19 // GPIO19 MISO
#define MOSI 27 // GPIO27 MOSI
#define SS 18   // GPIO18 CS
#define RST 14  // GPIO14 RESET
#define DI00 26 // GPIO26 IRQ(Interrupt Request)

//Banda definida em 915MHz
#define BAND 915E6   

//Essa constante informa ao dispositivo slave que se deseja receber dados
const String GETDATA = "getdata";  

//Essa constante é enviada pelo dispositivo slave junto aos dados para o master
const String SETDATA = "setdata=";

//Variável responsável pelo controle do display Oled para exibição dos dados
SSD1306 display(0x3c, 4, 15);

void setupDisplay(){

//O estado lógico do GPIO16 controla o display OLED
pinMode(16, OUTPUT);

//Estado lógico baixo - Reseta as configs do display
digitalWrite(16, LOW);

//Estado lógico alto - Liga o display
digitalWrite(16, HIGH);

//Configurações do display para exibição
display.init();
display.flipScreenVertically();
display.setFont(ArialMT_Plain_10);
display.setTextAlignment(TEXT_ALIGN_LEFT);
}

//Essas são as configurações iniciais do LoRa
void setupLoRa(){ 

//Rotina de inicio da comunicação de dados via LoRa
SPI.begin(SCK, MISO, MOSI, SS);
LoRa.setPins(SS, RST, DI00);

if (!LoRa.begin(BAND)){

//Se não inicializar, deve aparecer a seguinte mensagem de erro no display
display.clear();
display.drawString(0, 0, "Erro ao inicializar o LoRa!");
display.display();
while (1);
}

//Habilita o CRC
LoRa.enableCrc();

//Habilita a recepção de pacotes
LoRa.receive();
}

//MASTER

#ifdef MASTER

//Intervalo entre os envios de pacotes
#define INTERVAL 500

//Tempo do último envio de pacotes
long lastSendTime = 0;

void setup(){
Serial.begin(115200);

//Aciona as configurações feitas no display anteriormente
setupDisplay();

//Aciona  as configurações do LoRa feitas anteriormente
setupLoRa();

display.clear();
display.drawString(0, 0, "Master");
display.display();
}

void loop(){

//Se passar o tempo que foi definido no intervalo desde o último envio de dados
if (millis() - lastSendTime > INTERVAL){

//Marca o tempo que ocorreu o último envio
lastSendTime = millis();

//"send" envia o pacote para informar ao slave que deseja-se receber dados
send();
}

//Analisa se exite pacotes para recepção
receive();
}

void send(){

LoRa.beginPacket();
  
LoRa.print(GETDATA);
  
LoRa.endPacket();
}

void receive(){

//Tenta ler o pacote
int packetSize = LoRa.parsePacket();

//Verifica o tamanho do pacote para identificar o tamanho mínimo desejado
if (packetSize > SETDATA.length()){
String received = "";

//Esse comando armazena o pacote em uma string
while(LoRa.available()){
received += (char) LoRa.read();
}

//Analisa se a string possui os dados contidos em SETDATA
int index = received.indexOf(SETDATA);
if(index >= 0){

//Recupera a string que se encontra depois do SETDATA, dados de interesse
String data = received.substring(SETDATA.length());


//Ler o tempo que o master levou para criar o pacote, enviar, o slave receber, ler, criar outro pacote, enviar e o master receber para leitura
String waiting = String(millis() - lastSendTime);
      
display.clear();
display.drawString(0, 0, "Recebeu: " + data);
display.drawString(0, 10, "Tempo: " + waiting + "ms");
display.display();
}
}
}

#endif

//SLAVE


#ifndef MASTER


//Contador serve como dados para o slaver enviar
int count = 0;

void setup(){
Serial.begin(115200);
    
setupDisplay();
    
setupLoRa();
display.clear();
display.drawString(0, 0, "Slave esperando...");
display.display();
}

void loop(){

int packetSize = LoRa.parsePacket();

if (packetSize == GETDATA.length()){
String received = "";

while(LoRa.available()){
received += (char) LoRa.read();
}

if(received.equals(GETDATA)){

//Leitura dos dados
String data = readData();
Serial.println("Criando pacote para envio");

//Cria pacote para envio
LoRa.beginPacket();
LoRa.print(SETDATA + data);

//Encerra e envia o pacote de dados
LoRa.endPacket();
      
display.clear();
display.drawString(0, 0, "Enviou: " + String(data));
display.display();
}
}
}

//Essa função faz a leitura dos dados que se deseja enviar. Em um caso mais prático, poderia ser algum dado lido por sensores.

String readData(){
return String(count++);
}

#endif
